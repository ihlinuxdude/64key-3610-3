## SYSTEMATIC ANALYSIS: Charybdis PMW3610 Trackball Debugging

After analyzing your configuration, I've identified several critical issues that could explain the 45Â° diagonal tracking behavior. Let me break this down systematically:

## ðŸ”´ **CRITICAL ISSUES IDENTIFIED**

### 1. **SPI Mode Configuration Missing**
**HIGH PRIORITY** - The PMW3610 sensor requires **SPI Mode 3** (CPOL=1, CPHA=1), but your configuration is missing this:

```dts
&spi0 {
    status = "okay";
    compatible = "nordic,nrf-spim";
    pinctrl-0 = <&spi0_default>;
    pinctrl-1 = <&spi0_sleep>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&gpio0 20 GPIO_ACTIVE_LOW>;
    
    // ADD THESE MISSING SPI MODE SETTINGS:
    spi-cpol;        // Clock polarity = 1
    spi-cpha;        // Clock phase = 1
    
    trackball: trackball@0 {
        // ... rest of config
    };
};
```

### 2. **Pin Mapping Verification Issues**
Your current pin assignments may not correspond to physically connected traces:

```
SCK  = P0.22  // Check if this is actually wired to trackball SCK
MOSI = P0.24  // Check if this is actually wired to trackball MOSI  
MISO = P0.17  // Check if this is actually wired to trackball MISO
CS   = P0.20  // Check if this is actually wired to trackball CS
IRQ  = P0.26  // Check if this is actually wired to trackball IRQ
```

### 3. **Conflicting Driver Configuration**
Your configuration has potentially conflicting axis manipulation:

```conf
CONFIG_PMW3610_SWAP_XY=y     # Swaps Xâ†”Y axes (90Â° rotation)
CONFIG_PMW3610_INVERT_X=y    # Inverts X direction
CONFIG_PMW3610_INVERT_Y=y    # Inverts Y direction
```

**This combination creates: Swap XY + Invert both = 180Â° rotation + axis swap**

## ðŸŸ¡ **DIAGNOSTIC STEPS TO TAKE**

### Step 1: Verify Hardware Wiring
Check your Charybdis PCB schematic against Nice!Nano pinout:
```
Nice!Nano Pin â†’ PMW3610 Pin
P0.22 (D3)    â†’ SCK
P0.24 (D2)    â†’ MOSI
P0.17 (D4)    â†’ MISO  
P0.20 (D5)    â†’ CS
P0.26 (D6)    â†’ IRQ
```

### Step 2: Test Simplified Configuration
Try this minimal working configuration:

**charybdis_nano_right.conf:**
```conf
CONFIG_SPI=y
CONFIG_INPUT=y
CONFIG_ZMK_POINTING=y
CONFIG_PMW3610=y
CONFIG_PMW3610_CPI=1600

# Test with NO axis manipulation first
# CONFIG_PMW3610_SWAP_XY=n
# CONFIG_PMW3610_INVERT_X=n  
# CONFIG_PMW3610_INVERT_Y=n
```

**charybdis_nano_right.overlay:**
```dts
&spi0 {
    status = "okay";
    pinctrl-0 = <&spi0_default>;
    pinctrl-1 = <&spi0_sleep>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&gpio0 20 GPIO_ACTIVE_LOW>;
    
    // ADD SPI MODE 3 CONFIGURATION
    spi-cpol;
    spi-cpha;
    
    trackball: trackball@0 {
        status = "okay";
        compatible = "pixart,pmw3610";
        reg = <0>;
        spi-max-frequency = <2000000>;
        irq-gpios = <&gpio0 26 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        
        // Start minimal - add features after basic movement works
        // scroll-layers = <1>;
        // snipe-layers = <2>;
    };
};
```

### Step 3: Enable Debug Logging
Add to **charybdis_nano_right.conf:**
```conf
CONFIG_LOG=y
CONFIG_PMW3610_LOG_LEVEL_DBG=y
CONFIG_SPI_LOG_LEVEL_DBG=y
CONFIG_INPUT_LOG_LEVEL_DBG=y
```

## ðŸŸ¢ **PROGRESSIVE FIXING STRATEGY**

### Phase 1: Establish Basic Communication
1. Flash the minimal config above
2. Check logs for SPI initialization errors
3. Verify PMW3610 sensor detection

### Phase 2: Test Raw Movement
1. Test trackball movement in all directions
2. Note which directions work and which don't
3. Document the actual vs expected movement pattern

### Phase 3: Apply Axis Corrections
Based on Phase 2 results, apply **ONE setting at a time**:
```conf
# Try each individually:
CONFIG_PMW3610_SWAP_XY=y        # If X/Y are swapped
CONFIG_PMW3610_INVERT_X=y       # If X direction is wrong
CONFIG_PMW3610_INVERT_Y=y       # If Y direction is wrong
```

## ðŸ”§ **LIKELY ROOT CAUSE**

The 45Â° diagonal movement suggests **simultaneous X/Y input** when you expect pure vertical movement. This typically indicates:

1. **Missing SPI Mode 3** causing communication errors
2. **Incorrect pin mapping** creating electrical interference  
3. **Over-correction** with multiple axis manipulations applied simultaneously

## ðŸ“‹ **IMMEDIATE ACTION PLAN**

1. **Add SPI Mode 3 configuration** (spi-cpol + spi-cpha)
2. **Simplify axis configuration** - remove all SWAP/INVERT settings initially
3. **Verify physical pin connections** match your overlay
4. **Enable debug logging** to see actual sensor communication
5. **Test incrementally** - add one axis correction at a time

Would you like me to provide the complete corrected configuration files, or do you want to tackle these issues one at a time with specific testing guidance?