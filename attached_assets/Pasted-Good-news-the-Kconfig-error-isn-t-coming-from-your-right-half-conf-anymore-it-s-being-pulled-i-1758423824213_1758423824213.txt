Good news: the Kconfig error isn’t coming from your right-half `.conf` anymore — it’s being pulled in by the **Studio snippet** you’re building with.

In your log I can see:

> *Merged configuration from …/boards/shields/**studio-rpc-usb-uart.conf***
> **error: `ZMK_LOG_LEVEL` is assigned in a configuration file…**\*

That snippet sets `CONFIG_ZMK_LOG_LEVEL`, which is a **derived (non-prompt)** symbol in current ZMK. When Kconfig sees any file assign it, it hard-fails — exactly what you’re hitting.

## Fix: stop importing the offending snippet

Edit your `build.yaml` and remove the snippet on the **right** half:

```diff
 include:
   - board: nice_nano_v2
     shield: charybdis_nano_left
     cmake-args: >
       -DZMK_EXTRA_MODULES=$GITHUB_WORKSPACE/modules/pointer-rotate

   - board: nice_nano_v2
     shield: charybdis_nano_right
-    snippet: studio-rpc-usb-uart
     cmake-args: >
       -DCONFIG_ZMK_STUDIO=y
       -DCONFIG_ZMK_STUDIO_LOCKING=n
       -DZMK_EXTRA_MODULES=$GITHUB_WORKSPACE/modules/pointer-rotate
```

You **can keep** the `-DCONFIG_ZMK_STUDIO=y` and `…_LOCKING=n` CMake args; those don’t set `ZMK_LOG_LEVEL`. It’s the **snippet** that drags in a `.conf` fragment assigning it.

If you truly need the Studio UART helpers, fork the snippet conf into your repo and **remove the line that sets `CONFIG_ZMK_LOG_LEVEL`**—but the simplest path is just not using the snippet at all.

## Sanity checks (right half)

* Keep your cleaned `charybdis_nano_right.conf` (no `ZMK_LOG_LEVEL` anywhere).
* Keep your DT fixes (Mode 3 + CS on the device node):

```dts
&spi0 {
  status = "okay";
  pinctrl-0 = <&spi0_default>;
  pinctrl-1 = <&spi0_sleep>;
  pinctrl-names = "default", "sleep";

  trackball: pmw3610@0 {
    status = "okay";
    compatible = "pixart,pmw3610";
    reg = <0>;
    spi-max-frequency = <2000000>;
    spi-cpha;   /* MODE 3 */
    spi-cpol;   /* MODE 3 */
    cs-gpios = <&gpio0 20 GPIO_ACTIVE_LOW>;
    irq-gpios = <&gpio0 26 GPIO_ACTIVE_LOW>;
    scroll-layers = <1>;
    snipe-layers  = <2>;
  };
};
```

## After you push

1. The **right-half job should finally pass Kconfig** and compile.
2. Flash the right half and check boot logs for PMW3610 probe OK.
3. If motion works but is still \~**45° off**, enable the **rotate input-processor** you already added and set `angle-deg = <45>` (tune ±5° if needed).
4. If you get **no motion** or probe errors, paste the first PMW3610 init lines and we’ll zero in on wiring/IRQ next.

If you want, paste your current `build.yaml` and I’ll return a ready-to-paste diff with the snippet removed and the rest untouched.
