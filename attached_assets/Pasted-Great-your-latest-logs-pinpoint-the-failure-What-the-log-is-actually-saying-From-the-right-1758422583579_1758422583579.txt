Great—your latest logs pinpoint the failure.

## What the log is actually saying

From the right-half job:

> **error: `ZMK_LOG_LEVEL` is assigned in a configuration file, but is not directly user-configurable (has no prompt).**
> *It gets its value indirectly from other symbols…*

That’s why the job stops at **Kconfig** before even touching your PMW3610 changes. This is independent of SPI/DT; it’s just a bad Kconfig assignment in `charybdis_nano_right.conf` (or another `.conf` that’s merged for the right half).

### Why this happens

`ZMK_LOG_LEVEL` is a **derived** symbol. You can’t set it directly in a `.conf`. Use Zephyr’s normal logging knobs instead.

---

## Fix (minimal & surgical)

1. **Remove any line that sets `CONFIG_ZMK_LOG_LEVEL`** in your right-half config(s).
   Search your repo for `ZMK_LOG_LEVEL` and delete those assignments.

2. Keep logging like this (if you want logs):

```conf
CONFIG_LOG=y
CONFIG_ZMK_LOG=y
CONFIG_LOG_DEFAULT_LEVEL=3   # 0=none, 1=err, 2=wrn, 3=inf, 4=dbg
```

> If your PMW3610 driver exposes its own log level (e.g., `CONFIG_PMW3610_LOG_LEVEL` or `…_DBG`), set **that** symbol; don’t touch `ZMK_LOG_LEVEL`.

3. Re-run the Action. The right-half build should now get past Kconfig.

---

## Keep these device-tree fixes in place (they won’t cause the current error, but they matter)

In `charybdis_nano_right.overlay`:

* Put **`cs-gpios` on the PMW3610 child node**, not the bus.
* Specify **SPI Mode 3** (both flags) on the device:

```dts
&spi0 {
    status = "okay";
    pinctrl-0 = <&spi0_default>;
    pinctrl-1 = <&spi0_sleep>;
    pinctrl-names = "default", "sleep";

    trackball: pmw3610@0 {
        status = "okay";
        compatible = "pixart,pmw3610";
        reg = <0>;
        spi-max-frequency = <2000000>;
        spi-cpha;        // MODE 3
        spi-cpol;        // MODE 3
        cs-gpios = <&gpio0 20 GPIO_ACTIVE_LOW>;
        irq-gpios = <&gpio0 26 GPIO_ACTIVE_LOW>;
        scroll-layers = <1>;
        snipe-layers  = <2>;
    };
};
```

---

## After it builds & flashes

* If the ball **works but still moves \~45° off**, that confirms your wiring/SPI are good.
  Add the tiny **rotate input-processor** and set `angle-deg = <45>` on your pointing listener (order it **after** any swap/invert you keep).

* If you still get **no motion** or probe errors: paste the first 20 lines around the PMW3610 init in the boot log and we’ll zero in on SPI wiring/IRQ next.

---

### Quick checklist

* [ ] Remove `CONFIG_ZMK_LOG_LEVEL=…` (that’s the current build killer).
* [ ] Use `CONFIG_LOG_DEFAULT_LEVEL=3` (or `4` for debug).
* [ ] Keep `spi-cpha; spi-cpol;` and `cs-gpios` on the **device** node.
* [ ] Rebuild right half → flash → test vertical swipe.

If you want, drop the current contents of `charybdis_nano_right.conf` (just that file) and I’ll return a clean, compilable version you can paste in.
