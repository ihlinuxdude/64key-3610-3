You’re *still* dying in **Kconfig** before the build ever touches your SPI/PMW3610 work. The error in your latest log matches the earlier one:

> `ZMK_LOG_LEVEL is assigned in a configuration file, but is not directly user-configurable …`

So the right-half job fails during the Kconfig merge. Fix that first; then we can validate the SPI changes and (if needed) add the 45° rotation processor.

---

## 1) Kill the Kconfig blocker (right half)

Search the repo and delete any assignment of `CONFIG_ZMK_LOG_LEVEL`:

```bash
git grep -n 'ZMK_LOG_LEVEL'
```

Likely culprit: `config/charybdis_nano_right.conf` (or a right-half include).
**Remove** the line(s) that set `CONFIG_ZMK_LOG_LEVEL=*`.

Use these logging knobs instead (safe & supported):

```conf
# charybdis_nano_right.conf — logging section
CONFIG_LOG=y
CONFIG_ZMK_LOG=y
CONFIG_LOG_DEFAULT_LEVEL=3   # 0=none, 1=err, 2=wrn, 3=inf, 4=dbg
```

Optional: print proof in CI after Kconfig to confirm nothing sets it:

```bash
grep -n 'ZMK_LOG_LEVEL' build/zephyr/.config || true
```

---

## 2) Keep the SPI/PMW3610 DT fixes (they’re correct)

In `charybdis_nano_right.overlay`, keep these specifics:

```dts
&spi0 {
    status = "okay";
    pinctrl-0 = <&spi0_default>;
    pinctrl-1 = <&spi0_sleep>;
    pinctrl-names = "default", "sleep";

    trackball: pmw3610@0 {
        status = "okay";
        compatible = "pixart,pmw3610";
        reg = <0>;
        spi-max-frequency = <2000000>;
        spi-cpha;     /* MODE 3 */
        spi-cpol;     /* MODE 3 */

        cs-gpios = <&gpio0 20 GPIO_ACTIVE_LOW>;
        irq-gpios = <&gpio0 26 GPIO_ACTIVE_LOW>;

        scroll-layers = <1>;
        snipe-layers  = <2>;
    };
};
```

Notes:

* **CS pin** belongs on the *device* node (not `&spi0`).
* **Mode 3** (`spi-cpha; spi-cpol;`) is required for PixArt sensors.
* Leave your **4-wire SPI** pins as you had (SCK=P0.22, MOSI=P0.24, MISO=P0.17). Don’t collapse to “3-wire” unless your board is truly wired that way.

---

## 3) Right-half `.conf` (known-good template)

Drop this in to avoid stray symbols:

```conf
# charybdis_nano_right.conf (clean)
CONFIG_SPI=y
CONFIG_INPUT=y
CONFIG_ZMK_POINTING=y
CONFIG_ZMK_EXT_POWER=y

# Logging (do NOT set ZMK_LOG_LEVEL)
CONFIG_LOG=y
CONFIG_ZMK_LOG=y
CONFIG_LOG_DEFAULT_LEVEL=3

# PMW3610 driver options (correct names; avoid *_DIVIDOR typos)
CONFIG_PMW3610=y
CONFIG_PMW3610_CPI=1600
CONFIG_PMW3610_CPI_DIVIDER=4
CONFIG_PMW3610_SNIPE_CPI=200
CONFIG_PMW3610_SNIPE_CPI_DIVIDER=1
CONFIG_PMW3610_SCROLL_TICK=60

# Axis tools (0/90/180/270 only)
CONFIG_PMW3610_SWAP_XY=y
CONFIG_PMW3610_INVERT_X=y
CONFIG_PMW3610_INVERT_Y=y
```

---

## 4) Rebuild → flash → quick checks

* Build should now pass for the **right** job.
* Flash the right half and watch boot logs (probe OK, no SPI errors).
* Swipe **straight up** on the ball:

  * If movement is clean but \~**45° off** → wiring/SPI are good; you just need an **angle rotate** processor.
  * If **no motion** or probe errors → we’ll revisit pins/IRQ, but we can only do that *after* Kconfig lets the build proceed.

---

## 5) If you still feel the \~45° cant (expected)

Add the tiny **rotate input-processor** and attach it to your pointing listener; set `angle-deg = <45>`. You already have the code skeleton; just be sure to:

* Define the node in a loaded overlay:

  ```dts
  / {
      pointer_rotate0: pointer_rotate_0 {
          compatible = "zmk,pointer-rotate";
          angle-deg = <45>;
      };
  };

  &trackball_listener {
      processors = <&pointer_rotate0>;
  };
  ```
* Pass the correct flag in Actions:

  ```
  -DZMK_EXTRA_MODULES=$GITHUB_WORKSPACE/modules/pointer-rotate
  ```
* Ensure `modules/pointer-rotate/zephyr/module.yml` and `CMakeLists.txt` exist.

---

### TL;DR next moves

1. **Remove `CONFIG_ZMK_LOG_LEVEL=*`** anywhere it appears.
2. Re-run Actions → Build should go green for the **right** half.
3. Flash and test; if motion is \~45° off, enable the rotate processor at 45° and fine-tune.

If you want, paste the **exact** contents of `charybdis_nano_right.conf` and the **`&spi0` block** you’re using; I’ll return a ready-to-paste diff.
